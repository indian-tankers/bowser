const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const User = require('../models/user');
const argon2 = require('argon2');
const Role = require('../models/role');

router.post('/signup', async (req, res) => {
    try {
        const { userId, password, phoneNumber, name } = req.body;

        // Check if user already exists
        const existingUser = await User.findOne({ userId });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        // Hash the password
        const hashedPassword = await argon2.hash(password);

        // Find the admin role
        const adminRole = await Role.findOne({ name: 'admin' });
        if (!adminRole) {
            return res.status(500).json({ message: 'Admin role not found' });
        }

        // Create new admin user
        const newUser = new User({
            userId,
            password: hashedPassword,
            phoneNumber,
            name,
            roles: [adminRole._id],
            verified: false
        });

        await newUser.save();

        // Create and send JWT token
        const token = jwt.sign({ userId: newUser.userId, roles: ['admin'] }, process.env.JWT_SECRET, { expiresIn: '1h' });

        res.status(201).json({ 
            message: 'Admin user created successfully', 
            token, 
            user: { 
                userId: newUser.userId, 
                name: newUser.name, 
                phoneNumber: newUser.phoneNumber, 
                roles: ['admin'], 
                verified: newUser.verified 
            } 
        });
    } catch (error) {
        console.error('Admin signup error:', error);
        res.status(500).json({ message: 'Internal server error', error: error.message });
    }
});

router.post('/login', async (req, res) => {
    try {
        const { userId, password } = req.body;

        // Find user
        const user = await User.findOne({ userId });
        if (!user || !user.roles.includes('admin')) {
            return res.status(401).json({ message: 'Invalid credentials or not an admin' });
        }

        // Verify password
        const validPassword = await argon2.verify(user.password, password);
        if (!validPassword) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        // Create and send JWT token
        const token = jwt.sign({ userId: user.userId, roles: user.roles }, process.env.JWT_SECRET, { expiresIn: '1h' });

        res.json({ message: 'Login successful', token, user: { userId: user.userId, name: user.name, phoneNumber: user.phoneNumber, roles: user.roles, verified: user.verified } });
    } catch (error) {
        console.error('Admin login error:', error);
        res.status(500).json({ message: 'Internal server error', error: error.message });
    }
});

module.exports = router;
